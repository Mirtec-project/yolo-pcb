# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license
# YOLOv10m-memory-lite object detection model for PCB data (2 classes, simplified & memory efficient)
# Model docs: https://docs.ultralytics.com/models/yolov10
# Task docs: https://docs.ultralytics.com/tasks/detect

nc: 2  # number of classes

# 스케일 값을 낮춰서 전체 파라미터와 중간 활성값(activation) 크기를 줄임
# [depth_scale, width_scale, max_channels]
scales:
  m: [0.5, 0.5, 512]  

# --- Simplified & Memory-Efficient Backbone ---
# 원래 모델 대비 각 Conv 및 C3k2 모듈의 반복 횟수를 1회로 줄이고, 
# 너비 스케일을 0.5로 적용하여 채널 수를 절반으로 줄였습니다.
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [32, 3, 2]]           # 0: P1/2; 원래 64 → 64×0.5=32
  - [-1, 1, Conv, [64, 3, 2]]           # 1: P2/4; 원래 128 → 128×0.5=64
  - [-1, 1, C3k2, [128, False, 0.25]]    # 2: P2/4; 원래 256, 반복 2→1, 256×0.5=128
  - [-1, 1, Conv, [128, 3, 2]]          # 3: P3/8; 원래 256 → 256×0.5=128
  - [-1, 1, C3k2, [256, False, 0.25]]    # 4: P3/8; 원래 512, 반복 2→1, 512×0.5=256
  - [-1, 1, Conv, [256, 3, 2]]          # 5: P4/16; 원래 512 → 512×0.5=256
  - [-1, 1, C3k2, [256, True]]          # 6: P4/16; 원래 512, 반복 2→1, 512×0.5=256
  - [-1, 1, Conv, [512, 3, 2]]          # 7: P5/32; 원래 1024 → 1024×0.5=512
  - [-1, 1, C3k2, [512, True]]          # 8: P5/32; 원래 1024, 반복 2→1, 1024×0.5=512
  - [-1, 1, SPPF, [512, 5]]             # 9: SPPF (spatial pyramid pooling)
  - [-1, 2, C3k2, [512, False]] # 19 (P4/16-medium)
  # C2PSA 모듈은 단순 PCB 데이터에 과도한 복잡도를 주므로 제거함

# --- Simplified & Memory-Efficient Head ---
# 검출 헤드를 단순화하여 중간 피처맵을 여러 번 저장하는 것을 줄이고, 
# 두 개의 스케일(P3와 P4 정도)만 사용하여 메모리 부담을 낮췄습니다.
  - [-1, 2, C3k2, [512, False]] # 19 (P4/16-medium)
head:
  # [from, repeats, module, args]
  # [10] : upsample SPPF (layer 9) to P4 resolution
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]         # 10: Upsample SPPF output
  - [[10, 6], 1, Concat, [1]]                             # 11: Concat with backbone layer 6 (P4 scale)
  - [-1, 1, C3k2, [256, False]]                            # 12: Process concatenated P4 features
  
  # P3 branch: upsample (from layer 12) to finer resolution and fuse with backbone P3 feature
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]            # 13: Upsample P4 branch to P3 resolution
  - [[13, 4], 1, Concat, [1]]                             # 14: Concat with backbone layer 4 (P3 scale)
  - [-1, 1, C3k2, [128, False]]                            # 15: Process concatenated P3 features
  
  # 두 스케일(P3와 P4)에서 나온 피처를 다시 downsample하여 하나의 검출 피처로 결합
  - [-1, 1, Conv, [128, 3, 2]]                             # 16: Downsample P3 branch to P4 resolution
  - [[16, 12], 1, Concat, [1]]                            # 17: Concat downsampled P3 branch with P4 branch (from layer 12)
  - [-1, 1, C3k2, [256, True]]                             # 18: 최종 피처 처리
  - [[18], 1, Detect, [nc]]                               # 19: Detect layer (단일 스케일 검출)
